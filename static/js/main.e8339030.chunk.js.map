{"version":3,"sources":["components/Popup.js","components/Button.js","App.js","serviceWorker.js","index.js"],"names":["Popup","props","className","onClick","clicked","Button","audioSource","value","drumPadClass","power","id","name","drumButtonClick","src","type","App","state","currentButton","currentDrum","showPopup","handleKeyDown","bind","handleDrumClick","handlePowerClick","closePopup","this","setState","event","key","length","toUpperCase","test","playPromise","document","getElementById","play","undefined","then","_","catch","error","console","log","target","audioClip","volume","addEventListener","removeEventListener","buttonMap","Object","keys","buttonClass","toLowerCase","map","button","htmlFor","min","max","step","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.e8339030.chunk.js","sourcesContent":["import React from 'react';\nimport \"../App.css\";\n\nfunction Popup(props) {\n  return (\n    <div className=\"popup\">\n      <div className=\"popup\\_inner\">\n        <h1>When using the Free Code Camp test suite, note that the drum machine must be in the \"On\" mode for the tests to pass.  So fire it up first!</h1>\n        <button onClick={props.clicked}>Exit Message</button>\n      </div>\n    </div>\n  )\n}\n\nexport default Popup;\n","import React from 'react';\nimport \"../App.css\";\n\nfunction Button(props) {\n\n      let audioSource=\"https://raw.githubusercontent.com/AnneThor/drum-machine/master/public/audio/\";\n      {/*Adjusted references to allow functionality on github pages*/}\n      switch (props.value) {\n        case \"A\":\n          audioSource += \"a-snare.wav\"\n          break;\n        case \"C\":\n          audioSource += \"c-tom4.wav\"\n          break;\n        case \"D\":\n          audioSource += \"d-tom1.wav\"\n          break;\n        case \"E\":\n          audioSource += \"e-ride.wav\"\n          break;\n        case \"Q\":\n          audioSource += \"q-china.wav\"\n          break;\n        case \"S\":\n          audioSource += \"s-sidestick.wav\"\n          break;\n        case \"W\":\n          audioSource += \"w-highhat.wav\"\n          break;\n        case \"X\":\n          audioSource += \"x-tom3.wav\"\n          break;\n        case \"Z\":\n          audioSource += \"z-tom2.wav\"\n          break;\n        default:\n          return;\n      }\n\n      let drumPadClass = \"drum-pad\";\n      if (props.power === \"On\") {\n        drumPadClass += \" on\";\n      }\n\n  return (\n    <button className={drumPadClass}\n            id={audioSource}\n            value={props.value}\n            name={props.value}\n            onClick={props.drumButtonClick}>\n              { (props.power === \"On\") ? props.value : \"\" }\n        <audio className=\"clip\"\n               id={props.value}\n               src={audioSource}\n               type=\"audio/wav\">\n               Your browser does not support the <code>audio</code>element.\n        </audio>\n    </button>\n  )\n}\n\nexport default Button;\n","import React from 'react';\nimport './App.css';\nimport Popup from './components/Popup.js';\nimport Button from './components/Button.js';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentButton: '',\n      currentDrum: {\n        \"Q\": \"CHINA\",\n        \"W\": \"HIGHHAT\",\n        \"E\": \"RIDE\",\n        \"A\": \"SNARE\",\n        \"S\": \"SIDESTICK\",\n        \"D\": \"TOM 1\",\n        \"Z\": \"TOM 2\",\n        \"X\": \"TOM 3\",\n        \"C\": \"TOM 4\",\n      },\n      power: \"Off\",\n      showPopup: true,\n    };\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.handleDrumClick = this.handleDrumClick.bind(this);\n    this.handlePowerClick = this.handlePowerClick.bind(this);\n    this.closePopup = this.closePopup.bind(this);\n  }\n\n  closePopup() {\n    this.setState({\n      showPopup: false,\n    })\n  }\n\n  handleKeyDown(event) {\n    if (this.state.power === \"Off\" | event.key.length > 1) { return };\n    let key = event.key.toUpperCase();\n    let regExp = /[ACDEQSWXZ]{1}/;\n    if (regExp.test(key)) {\n      var playPromise = document.getElementById(key).play();\n      if (playPromise !== undefined) {\n        playPromise.then ( _=> {\n          //means it is playing\n        })\n        .catch( error => {\n          //autoplay was prevented\n          console.log(\"playback prevented\" + error);\n        })\n      }\n      this.setState({currentButton: key});\n    }\n  }\n\n  handleDrumClick(event) {\n    if (this.state.power === \"Off\") { return };\n    this.setState( {currentButton: event.target.value });\n    let audioClip = document.getElementById(event.target.value);\n    audioClip.volume = document.getElementById(\"myRange\").value;\n    audioClip.play();\n  }\n\n  handlePowerClick(event) {\n    this.setState({power: (this.state.power === \"On\") ? \"Off\" : \"On\"});\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.handleKeyDown, false);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.handleKeyDown, false);\n  }\n\n\n  render() {\n\n    let buttonMap = Object.keys(this.state.currentDrum);\n    let powerStatus = this.state.power.toLowerCase();\n    let buttonClass = \"display-button\";\n    if (powerStatus === \"on\") {\n      buttonClass += \" on\";\n    }\n\n    return (\n      <div className=\"App\"\n           id=\"drum-machine\">\n        {this.state.showPopup ? <Popup clicked={this.closePopup} /> : \"\"}\n        <h1 className=\"App-header\">Drum Machine</h1>\n\n        <div id=\"display\">\n\n          <section className=\"drum-buttons\">\n            { buttonMap.map( button => <Button key={button}\n                                               value={button}\n                                               power={this.state.power}\n                                               drumButtonClick={this.handleDrumClick}  />) }\n          </section>\n\n          <section className=\"fine-tuners\">\n\n            <div className=\"power\">\n              <label htmlFor=\"power\">Power {this.state.power}</label>\n              <label className=\"power-switch\">\n                <input type=\"checkbox\"\n                       id=\"on-off\"\n                       onClick={this.handlePowerClick}/>\n                <span className=\"power-slider\"></span>\n              </label>\n            </div>\n\n            <button className={buttonClass}>{\n              (this.state.power === \"On\") ? (this.state.currentDrum[`${this.state.currentButton}`]) : \"\"}\n            </button>\n\n            <div className=\"slide-container\">\n              <label htmlFor=\"volume-slider\"\n                     className=\"volume-slider-label\">Volume:</label>\n              <input type=\"range\"\n                     min=\"0\" max=\"1\"\n                     step=\".1\"\n                     className=\"slider\"\n                     id=\"myRange\" />\n            </div>\n\n          </section>\n\n\n        </div>\n\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}