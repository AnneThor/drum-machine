{"version":3,"sources":["Button.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","controlClass","value","audioSource","className","id","name","onClick","drumButtonClick","src","type","App","state","currentButton","currentDrum","power","handleKeyDown","bind","handleDrumClick","event","key","length","toUpperCase","test","document","getElementById","play","this","setState","target","audioClip","volume","addEventListener","removeEventListener","buttonMap","Object","keys","map","button","htmlFor","min","max","step","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.13f35fa8.chunk.js","sourcesContent":["import React from 'react';\nimport \"./App.css\";\n\nfunction Button(props) {\n\n      let controlClass = props.value + \"-control\";\n\n      let audioSource='/audio/';\n      switch (props.value) {\n        case \"A\":\n          audioSource +=  \"a-snare.wav\"\n          break;\n        case \"C\":\n          audioSource += \"c-tom4.wav\"\n          break;\n        case \"D\":\n          audioSource += \"d-tom1.wav\"\n          break;\n        case \"E\":\n          audioSource += \"e-ride.wav\"\n          break;\n        case \"Q\":\n          audioSource += \"q-china.wav\"\n          break;\n        case \"S\":\n          audioSource += \"s-sidestick.wav\"\n          break;\n        case \"W\":\n          audioSource += \"w-highhat.wav\"\n          break;\n        case \"X\":\n          audioSource += \"x-tom3.wav\"\n          break;\n        case \"Z\":\n          audioSource += \"z-tom2.wav\"\n          break;\n        default:\n          return;\n      }\n\n  return (\n    <button className={`drum-pad ${controlClass}`}\n            id={audioSource}\n            value={props.value}\n            name={props.value}\n            onClick={props.drumButtonClick}>\n              {props.value}\n        <audio className=\"clip\"\n               id={props.value}\n               src={audioSource}\n               type=\"audio/wav\">\n               Your browser does not support the <code>audio</code>element.\n        </audio>\n    </button>\n  )\n}\n\nexport default Button;\n","import React from 'react';\nimport './App.css';\nimport Button from './Button.js';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentButton: '',\n      currentDrum: {\n        \"Q\": \"CHINA\",\n        \"W\": \"HIGHHAT\",\n        \"E\": \"RIDE\",\n        \"A\": \"SNARE\",\n        \"S\": \"SIDESTICK\",\n        \"D\": \"TOM 1\",\n        \"Z\": \"TOM 2\",\n        \"X\": \"TOM 3\",\n        \"C\": \"TOM 4\",\n      },\n      power: \"Off\",\n    };\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.handleDrumClick = this.handleDrumClick.bind(this);\n  }\n\n  handleKeyDown(event) {\n    if (event.key.length > 1) { return };\n    let key = event.key.toUpperCase();\n    let regExp = /[ACDEQSWXZ]{1}/;\n    if (regExp.test(key)) {\n      document.getElementById(key).play();\n      this.setState({currentButton: key});\n    }\n  }\n\n  handleDrumClick(event) {\n    this.setState( {currentButton: event.target.value });\n    let audioClip = document.getElementById(event.target.value);\n    audioClip.volume = document.getElementById(\"myRange\").value;\n    audioClip.play();\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.handleKeyDown, false);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.handleKeyDown, false);\n  }\n\n\n  render() {\n\n    let buttonMap = Object.keys(this.state.currentDrum);\n\n    return (\n      <div className=\"App\"\n           id=\"drum-machine\">\n        <h1 className=\"App-header\">Drum Machine</h1>\n\n        <div id=\"display\">\n\n          <section className=\"drum-buttons\">\n            { buttonMap.map( button => <Button key={button} value={button} drumButtonClick={this.handleDrumClick} />) }\n          </section>\n\n          <section className=\"fine-tuners\">\n            <label htmlFor=\"power\"\n                   className=\"power-switch\">{this.state.power}\n              <input type=\"checkbox\" />\n              <span className=\"power-slider\"></span>\n            </label>\n\n            <button className=\"display-button\">{this.state.currentDrum[`${this.state.currentButton}`]}</button>\n\n            <div className=\"slide-container\">\n              <label htmlFor=\"volume-slider\"\n                     className=\"volume-slider-label\">Volume:</label>\n              <input type=\"range\"\n                     min=\"0\" max=\"1\"\n                     step=\".1\"\n                     className=\"slider\"\n                     id=\"myRange\" />\n            </div>\n\n            <label htmlFor=\"bank\"\n                   className=\"bank-switch\">BANK\n              <input type=\"checkbox\" />\n              <span className=\"bank-slider\"></span>\n            </label>\n\n          </section>\n\n\n        </div>\n\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}